# Copyright (c) Microsoft Corporation.
# Use of this source code is governed by a BSD-style
# license that can be found in the LICENSE file.

# This template defines the build/test matrix of jobs/stages based on the given flags.

parameters:
  # buildandpack builders build the tar.gz/zips of our distribution.
  # Minimal dependencies, and runnable in the official pipeline.
  - name: buildandpack
    type: boolean
    default: false
  # innerloop builders are intended to be reliable and indicate ship-stoppers.
  - name: innerloop
    type: boolean
    default: false
  # outerloop builders may be flaky and take significantly longer.
  - name: outerloop
    type: boolean
    default: false
  # includeArm64Host builders use a dedicated pool, which might cause resource
  # contention, and aren't compatible with official 1ES PT as of writing.
  - name: includeArm64Host
    type: boolean
    default: false

  # Passthrough to the build job.
  - name: official
    type: boolean
    default: false
  - name: sign
    type: boolean
    default: false
  - name: publish
    type: boolean
    default: false
  - name: createSourceArchive
    type: boolean
    default: false
  - name: createSymbols
    type: boolean
    default: false
  - name: releaseVersion
    type: string
    default: 'nil'
  - name: publishReleaseStudio
    type: boolean
    default: false
  - name: publishExistingRunID
    type: string
    default: 'nil'

stages:
  - template: shorthand-builders-to-builders.yml
    parameters:
      jobsTemplate: builders-to-stages.yml
      jobsParameters:
        official: ${{ parameters.official }}
        sign: ${{ parameters.sign }}
        publish: ${{ parameters.publish }}
        publishReleaseStudio: ${{ parameters.publishReleaseStudio }}
        publishExistingRunID: ${{ parameters.publishExistingRunID }}
        createSourceArchive: ${{ parameters.createSourceArchive }}
        createSymbols: ${{ parameters.createSymbols }}
        releaseVersion: ${{ parameters.releaseVersion }}
      shorthandBuilders:
        # Individually enable buildandpack.
        # Could be determined based on inputs (if more are added) but the caller can just tell us.
        - ${{ if parameters.buildandpack }}:
          - { os: linux, arch: amd64, config: buildandpack }
          - { os: windows, arch: amd64, config: buildandpack }
          - { os: linux, arch: arm, hostArch: amd64, config: buildandpack }
          - { os: linux, arch: arm64, hostArch: amd64, config: buildandpack }
          - ${{ if parameters.includeArm64Host }}:
            - { os: linux, arch: arm64, config: buildandpack }
        - ${{ if parameters.innerloop }}:
          - { os: linux, arch: amd64, config: devscript }
          - { os: linux, arch: amd64, config: test }
          - { os: linux, arch: amd64, config: test, distro: ubuntu }
          - { os: linux, arch: amd64, config: test, distro: azurelinux3 }
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: test }
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: test, fips: true }
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: test, distro: ubuntu }
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: test, distro: azurelinux3 }
          - { experiment: boringcrypto, os: linux, arch: amd64, config: test }
          - { experiment: boringcrypto, os: linux, arch: amd64, config: test, distro: ubuntu }
          - { os: windows, arch: amd64, config: devscript }
          - { os: windows, arch: amd64, config: test }
          - { experiment: cngcrypto, os: windows, arch: amd64, config: test }
          - { experiment: cngcrypto, os: windows, arch: amd64, config: test, fips: true }
          # Test that buildandpack works on Windows x86-32, but don't release it.
          - { os: windows, hostArch: amd64, arch: 386, config: buildandpack }
        - ${{ if parameters.outerloop }}:
          # Upstream builders.
          # - { os: linux, arch: amd64, config: clang } https://github.com/microsoft/go/issues/342
          - { os: linux, arch: amd64, config: longtest }
          - { os: linux, arch: amd64, config: nocgo }
          - { os: linux, arch: amd64, config: noopt }
          - { os: linux, arch: amd64, config: race }
          # - { os: linux, arch: amd64, config: racecompile } https://github.com/microsoft/go/issues/54
          - { os: linux, arch: amd64, config: regabi }
          - { os: linux, arch: amd64, config: ssacheck }
          - { os: linux, arch: amd64, config: staticlockranking }
          # - { experiment: opensslcrypto, os: linux, arch: amd64, config: clang } https://github.com/microsoft/go/issues/342
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: longtest }
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: race }
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: regabi }
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: ssacheck }
          - { experiment: opensslcrypto, os: linux, arch: amd64, config: staticlockranking }
